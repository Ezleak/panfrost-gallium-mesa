diff a/src/egl/wayland/wayland-drm/wayland-drm.c b/src/egl/wayland/wayland-drm/wayland-drm.c	(rejected hunks)
@@ -27,238 +27,224 @@
  *    Benjamin Franzke <benjaminfranzke@googlemail.com>
  */
 
+#include <stddef.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <stddef.h>
 #include <unistd.h>
 
-#include <wayland-server.h>
-#include "wayland-drm.h"
 #include "wayland-drm-server-protocol.h"
+#include "wayland-drm.h"
+#include <wayland-server.h>
 
-#define MIN(x,y) (((x)<(y))?(x):(y))
+#define MIN(x, y) (((x) < (y)) ? (x) : (y))
 
 static void
 destroy_buffer(struct wl_resource *resource)
 {
-	struct wl_drm_buffer *buffer = wl_resource_get_user_data(resource);
-	struct wl_drm *drm = buffer->drm;
+   struct wl_drm_buffer *buffer = wl_resource_get_user_data(resource);
+   struct wl_drm *drm = buffer->drm;
 
-	drm->callbacks.release_buffer(drm->user_data, buffer);
-	free(buffer);
+   drm->callbacks.release_buffer(drm->user_data, buffer);
+   free(buffer);
 }
 
 static void
 buffer_destroy(struct wl_client *client, struct wl_resource *resource)
 {
-	wl_resource_destroy(resource);
+   wl_resource_destroy(resource);
 }
 
 static void
 create_buffer(struct wl_client *client, struct wl_resource *resource,
-              uint32_t id, uint32_t name, int fd,
-              int32_t width, int32_t height,
-              uint32_t format,
-              int32_t offset0, int32_t stride0,
-              int32_t offset1, int32_t stride1,
-              int32_t offset2, int32_t stride2)
+              uint32_t id, uint32_t name, int fd, int32_t width, int32_t height,
+              uint32_t format, int32_t offset0, int32_t stride0,
+              int32_t offset1, int32_t stride1, int32_t offset2,
+              int32_t stride2)
 {
-	struct wl_drm *drm = wl_resource_get_user_data(resource);
-	struct wl_drm_buffer *buffer;
-
-	buffer = calloc(1, sizeof *buffer);
-	if (buffer == NULL) {
-		wl_resource_post_no_memory(resource);
-		return;
-	}
-
-	buffer->drm = drm;
-	buffer->width = width;
-	buffer->height = height;
-	buffer->format = format;
-	buffer->offset[0] = offset0;
-	buffer->stride[0] = stride0;
-	buffer->offset[1] = offset1;
-	buffer->stride[1] = stride1;
-	buffer->offset[2] = offset2;
-	buffer->stride[2] = stride2;
-
-        drm->callbacks.reference_buffer(drm->user_data, name, fd, buffer);
-	if (buffer->driver_buffer == NULL) {
-		wl_resource_post_error(resource,
-				       WL_DRM_ERROR_INVALID_NAME,
-				       "invalid name");
-		return;
-	}
-
-	buffer->resource =
-		wl_resource_create(client, &wl_buffer_interface, 1, id);
-	if (!buffer->resource) {
-		wl_resource_post_no_memory(resource);
-		free(buffer);
-		return;
-	}
-
-	wl_resource_set_implementation(buffer->resource,
-				       (void (**)(void)) &drm->buffer_interface,
-				       buffer, destroy_buffer);
+   struct wl_drm *drm = wl_resource_get_user_data(resource);
+   struct wl_drm_buffer *buffer;
+
+   buffer = calloc(1, sizeof *buffer);
+   if (buffer == NULL) {
+      wl_resource_post_no_memory(resource);
+      return;
+   }
+
+   buffer->drm = drm;
+   buffer->width = width;
+   buffer->height = height;
+   buffer->format = format;
+   buffer->offset[0] = offset0;
+   buffer->stride[0] = stride0;
+   buffer->offset[1] = offset1;
+   buffer->stride[1] = stride1;
+   buffer->offset[2] = offset2;
+   buffer->stride[2] = stride2;
+
+   drm->callbacks.reference_buffer(drm->user_data, name, fd, buffer);
+   if (buffer->driver_buffer == NULL) {
+      wl_resource_post_error(resource, WL_DRM_ERROR_INVALID_NAME,
+                             "invalid name");
+      return;
+   }
+
+   buffer->resource = wl_resource_create(client, &wl_buffer_interface, 1, id);
+   if (!buffer->resource) {
+      wl_resource_post_no_memory(resource);
+      free(buffer);
+      return;
+   }
+
+   wl_resource_set_implementation(buffer->resource,
+                                  (void (**)(void)) & drm->buffer_interface,
+                                  buffer, destroy_buffer);
 }
 
 static void
 drm_create_buffer(struct wl_client *client, struct wl_resource *resource,
-		  uint32_t id, uint32_t name, int32_t width, int32_t height,
-		  uint32_t stride, uint32_t format)
+                  uint32_t id, uint32_t name, int32_t width, int32_t height,
+                  uint32_t stride, uint32_t format)
 {
-        switch (format) {
-        case WL_DRM_FORMAT_ABGR2101010:
-        case WL_DRM_FORMAT_XBGR2101010:
-        case WL_DRM_FORMAT_ARGB2101010:
-        case WL_DRM_FORMAT_XRGB2101010:
-        case WL_DRM_FORMAT_ARGB8888:
-        case WL_DRM_FORMAT_XRGB8888:
-        case WL_DRM_FORMAT_YUYV:
-        case WL_DRM_FORMAT_RGB565:
-                break;
-        default:
-                wl_resource_post_error(resource,
-                                       WL_DRM_ERROR_INVALID_FORMAT,
-                                       "invalid format");
-           return;
-        }
-
-        create_buffer(client, resource, id,
-                      name, -1, width, height, format, 0, stride, 0, 0, 0, 0);
+   switch (format) {
+   case WL_DRM_FORMAT_ABGR2101010:
+   case WL_DRM_FORMAT_XBGR2101010:
+   case WL_DRM_FORMAT_ARGB2101010:
+   case WL_DRM_FORMAT_XRGB2101010:
+   case WL_DRM_FORMAT_ARGB8888:
+   case WL_DRM_FORMAT_XRGB8888:
+   case WL_DRM_FORMAT_YUYV:
+   case WL_DRM_FORMAT_RGB565:
+      break;
+   default:
+      wl_resource_post_error(resource, WL_DRM_ERROR_INVALID_FORMAT,
+                             "invalid format");
+      return;
+   }
+
+   create_buffer(client, resource, id, name, -1, width, height, format, 0,
+                 stride, 0, 0, 0, 0);
 }
 
 static void
-drm_create_planar_buffer(struct wl_client *client,
-                         struct wl_resource *resource,
-                         uint32_t id, uint32_t name,
-                         int32_t width, int32_t height, uint32_t format,
-                         int32_t offset0, int32_t stride0,
-                         int32_t offset1, int32_t stride1,
+drm_create_planar_buffer(struct wl_client *client, struct wl_resource *resource,
+                         uint32_t id, uint32_t name, int32_t width,
+                         int32_t height, uint32_t format, int32_t offset0,
+                         int32_t stride0, int32_t offset1, int32_t stride1,
                          int32_t offset2, int32_t stride2)
 {
-        switch (format) {
-	case WL_DRM_FORMAT_YUV410:
-	case WL_DRM_FORMAT_YUV411:
-	case WL_DRM_FORMAT_YUV420:
-	case WL_DRM_FORMAT_YUV422:
-	case WL_DRM_FORMAT_YUV444:
-	case WL_DRM_FORMAT_NV12:
-        case WL_DRM_FORMAT_NV16:
-                break;
-        default:
-                wl_resource_post_error(resource,
-                                       WL_DRM_ERROR_INVALID_FORMAT,
-                                       "invalid format");
-           return;
-        }
-
-        create_buffer(client, resource, id, name, -1, width, height, format,
-                      offset0, stride0, offset1, stride1, offset2, stride2);
+   switch (format) {
+   case WL_DRM_FORMAT_YUV410:
+   case WL_DRM_FORMAT_YUV411:
+   case WL_DRM_FORMAT_YUV420:
+   case WL_DRM_FORMAT_YUV422:
+   case WL_DRM_FORMAT_YUV444:
+   case WL_DRM_FORMAT_NV12:
+   case WL_DRM_FORMAT_NV16:
+      break;
+   default:
+      wl_resource_post_error(resource, WL_DRM_ERROR_INVALID_FORMAT,
+                             "invalid format");
+      return;
+   }
+
+   create_buffer(client, resource, id, name, -1, width, height, format, offset0,
+                 stride0, offset1, stride1, offset2, stride2);
 }
 
 static void
-drm_create_prime_buffer(struct wl_client *client,
-                        struct wl_resource *resource,
-                        uint32_t id, int fd,
-                        int32_t width, int32_t height, uint32_t format,
-                        int32_t offset0, int32_t stride0,
-                        int32_t offset1, int32_t stride1,
-                        int32_t offset2, int32_t stride2)
+drm_create_prime_buffer(struct wl_client *client, struct wl_resource *resource,
+                        uint32_t id, int fd, int32_t width, int32_t height,
+                        uint32_t format, int32_t offset0, int32_t stride0,
+                        int32_t offset1, int32_t stride1, int32_t offset2,
+                        int32_t stride2)
 {
-        create_buffer(client, resource, id, 0, fd, width, height, format,
-                      offset0, stride0, offset1, stride1, offset2, stride2);
-        close(fd);
+   create_buffer(client, resource, id, 0, fd, width, height, format, offset0,
+                 stride0, offset1, stride1, offset2, stride2);
+   close(fd);
 }
 
 static void
-drm_authenticate(struct wl_client *client,
-		 struct wl_resource *resource, uint32_t id)
+drm_authenticate(struct wl_client *client, struct wl_resource *resource,
+                 uint32_t id)
 {
-	struct wl_drm *drm = wl_resource_get_user_data(resource);
-
-	if (!drm->callbacks.authenticate ||
-	    drm->callbacks.authenticate(drm->user_data, id) < 0)
-		wl_resource_post_error(resource,
-				       WL_DRM_ERROR_AUTHENTICATE_FAIL,
-				       "authenticate failed");
-	else
-		wl_resource_post_event(resource, WL_DRM_AUTHENTICATED);
+   struct wl_drm *drm = wl_resource_get_user_data(resource);
+
+   if (!drm->callbacks.authenticate ||
+       drm->callbacks.authenticate(drm->user_data, id) < 0)
+      wl_resource_post_error(resource, WL_DRM_ERROR_AUTHENTICATE_FAIL,
+                             "authenticate failed");
+   else
+      wl_resource_post_event(resource, WL_DRM_AUTHENTICATED);
 }
 
 static const struct wl_drm_interface drm_interface = {
-	drm_authenticate,
-	drm_create_buffer,
-        drm_create_planar_buffer,
-        drm_create_prime_buffer
+   drm_authenticate,
+   drm_create_buffer,
+   drm_create_planar_buffer,
+   drm_create_prime_buffer,
 };
 
 static void
 bind_drm(struct wl_client *client, void *data, uint32_t version, uint32_t id)
 {
-	struct wl_drm *drm = data;
-	struct wl_resource *resource;
-        uint32_t capabilities;
-
-	resource = wl_resource_create(client, &wl_drm_interface,
-				      MIN(version, 2), id);
-	if (!resource) {
-		wl_client_post_no_memory(client);
-		return;
-	}
-
-	wl_resource_set_implementation(resource, &drm_interface, data, NULL);
-
-	wl_resource_post_event(resource, WL_DRM_DEVICE, drm->device_name);
-
-	if (drm->callbacks.is_format_supported(drm->user_data,
-					       WL_DRM_FORMAT_ARGB2101010)) {
-		wl_resource_post_event(resource, WL_DRM_FORMAT,
-				       WL_DRM_FORMAT_ARGB2101010);
-	}
-
-	if (drm->callbacks.is_format_supported(drm->user_data,
-					       WL_DRM_FORMAT_XRGB2101010)) {
-		wl_resource_post_event(resource, WL_DRM_FORMAT,
-				       WL_DRM_FORMAT_XRGB2101010);
-	}
-
-	if (drm->callbacks.is_format_supported(drm->user_data,
-					       WL_DRM_FORMAT_ABGR2101010)) {
-		wl_resource_post_event(resource, WL_DRM_FORMAT,
-				       WL_DRM_FORMAT_ABGR2101010);
-	}
-
-	if (drm->callbacks.is_format_supported(drm->user_data,
-					       WL_DRM_FORMAT_XBGR2101010)) {
-		wl_resource_post_event(resource, WL_DRM_FORMAT,
-				       WL_DRM_FORMAT_XBGR2101010);
-	}
-
-	wl_resource_post_event(resource, WL_DRM_FORMAT,
-			       WL_DRM_FORMAT_ARGB8888);
-	wl_resource_post_event(resource, WL_DRM_FORMAT,
-			       WL_DRM_FORMAT_XRGB8888);
-        wl_resource_post_event(resource, WL_DRM_FORMAT,
-                               WL_DRM_FORMAT_RGB565);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV410);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV411);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV420);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV422);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV444);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV12);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV16);
-        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUYV);
-
-        capabilities = 0;
-        if (drm->flags & WAYLAND_DRM_PRIME)
-           capabilities |= WL_DRM_CAPABILITY_PRIME;
-
-        if (version >= 2)
-           wl_resource_post_event(resource, WL_DRM_CAPABILITIES, capabilities);
+   struct wl_drm *drm = data;
+   struct wl_resource *resource;
+   uint32_t capabilities;
+
+   resource =
+      wl_resource_create(client, &wl_drm_interface, MIN(version, 2), id);
+   if (!resource) {
+      wl_client_post_no_memory(client);
+      return;
+   }
+
+   wl_resource_set_implementation(resource, &drm_interface, data, NULL);
+
+   wl_resource_post_event(resource, WL_DRM_DEVICE, drm->device_name);
+
+   if (drm->callbacks.is_format_supported(drm->user_data,
+                                          WL_DRM_FORMAT_ARGB2101010)) {
+      wl_resource_post_event(resource, WL_DRM_FORMAT,
+                             WL_DRM_FORMAT_ARGB2101010);
+   }
+
+   if (drm->callbacks.is_format_supported(drm->user_data,
+                                          WL_DRM_FORMAT_XRGB2101010)) {
+      wl_resource_post_event(resource, WL_DRM_FORMAT,
+                             WL_DRM_FORMAT_XRGB2101010);
+   }
+
+   if (drm->callbacks.is_format_supported(drm->user_data,
+                                          WL_DRM_FORMAT_ABGR2101010)) {
+      wl_resource_post_event(resource, WL_DRM_FORMAT,
+                             WL_DRM_FORMAT_ABGR2101010);
+   }
+
+   if (drm->callbacks.is_format_supported(drm->user_data,
+                                          WL_DRM_FORMAT_XBGR2101010)) {
+      wl_resource_post_event(resource, WL_DRM_FORMAT,
+                             WL_DRM_FORMAT_XBGR2101010);
+   }
+
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_ARGB8888);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_XRGB8888);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_RGB565);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV410);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV411);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV420);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV422);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV444);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV12);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV16);
+   wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUYV);
+
+   capabilities = 0;
+   if (drm->flags & WAYLAND_DRM_PRIME)
+      capabilities |= WL_DRM_CAPABILITY_PRIME;
+
+   if (version >= 2)
+      wl_resource_post_event(resource, WL_DRM_CAPABILITIES, capabilities);
 }
 
 struct wl_drm *
