diff a/src/util/os_misc.c b/src/util/os_misc.c	(rejected hunks)
@@ -54,7 +57,7 @@
 #  include <unistd.h>
 #  include <log/log.h>
 #  include <cutils/properties.h>
-#elif DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_HURD
+#elif DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_HURD || DETECT_OS_MANAGARM
 #  include <unistd.h>
 #elif DETECT_OS_OPENBSD || DETECT_OS_FREEBSD
 #  include <sys/resource.h>
@@ -125,17 +130,7 @@ os_log_message(const char *message)
 
 #if DETECT_OS_ANDROID
 #  include <ctype.h>
-#  include "hash_table.h"
-#  include "ralloc.h"
-#  include "simple_mtx.h"
-
-static struct hash_table *options_tbl;
-
-static void
-options_tbl_fini(void)
-{
-   _mesa_hash_table_destroy(options_tbl, NULL);
-}
+#  include "c11/threads.h"
 
 /**
  * Get an option value from android's property system, as a fallback to
@@ -153,28 +148,11 @@ options_tbl_fini(void)
  *  - MESA_EXTENSION_OVERRIDE -> mesa.extension.override
  *  - GALLIUM_HUD -> mesa.gallium.hud
  *
- * Note that we use a hashtable for two purposes:
- *  1) Avoid re-translating the option name on subsequent lookups
- *  2) Avoid leaking memory.  Because property_get() returns the
- *     property value into a user allocated buffer, we cannot return
- *     that directly to the caller, so we need to strdup().  With the
- *     hashtable, subsquent lookups can return the existing string.
  */
-static const char *
+static char *
 os_get_android_option(const char *name)
 {
-   if (!options_tbl) {
-      options_tbl = _mesa_hash_table_create(NULL, _mesa_hash_string,
-            _mesa_key_string_equal);
-      atexit(options_tbl_fini);
-   }
-
-   struct hash_entry *entry = _mesa_hash_table_search(options_tbl, name);
-   if (entry) {
-      return entry->data;
-   }
-
-   char value[PROPERTY_VALUE_MAX];
+   static thread_local char os_android_option_value[PROPERTY_VALUE_MAX];
    char key[PROPERTY_KEY_MAX];
    char *p = key, *end = key + PROPERTY_KEY_MAX;
    /* add "mesa." prefix if necessary: */
@@ -189,17 +167,29 @@ os_get_android_option(const char *name)
       }
    }
 
-   const char *opt = NULL;
-   int len = property_get(key, value, NULL);
+   int len = property_get(key, os_android_option_value, NULL);
    if (len > 1) {
-      opt = ralloc_strdup(options_tbl, value);
+      return os_android_option_value;
    }
+   return NULL;
+}
+#endif
 
-   _mesa_hash_table_insert(options_tbl, name, (void *)opt);
+#if DETECT_OS_WINDOWS
 
-   return opt;
+/* getenv doesn't necessarily reflect changes to the environment
+ * that have been made during the process lifetime, if either the
+ * setter uses a different CRT (e.g. due to static linking) or the
+ * setter used the Win32 API directly. */
+const char *
+os_get_option(const char *name)
+{
+   static thread_local char value[_MAX_ENV];
+   DWORD size = GetEnvironmentVariableA(name, value, _MAX_ENV);
+   return (size > 0 && size < _MAX_ENV) ? value : NULL;
 }
-#endif
+
+#else
 
 const char *
 os_get_option(const char *name)
