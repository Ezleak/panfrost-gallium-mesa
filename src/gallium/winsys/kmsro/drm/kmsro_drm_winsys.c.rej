diff a/src/gallium/winsys/kmsro/drm/kmsro_drm_winsys.c b/src/gallium/winsys/kmsro/drm/kmsro_drm_winsys.c	(rejected hunks)
@@ -36,126 +36,93 @@
 #include "xf86drm.h"
 
 #include "pipe/p_screen.h"
+#include "pipe-loader/pipe_loader.h"
 #include "renderonly/renderonly.h"
 #include "util/u_memory.h"
 
+#include "loader.h"
+
 static void kmsro_ro_destroy(struct renderonly *ro)
 {
    if (ro->gpu_fd >= 0)
       close(ro->gpu_fd);
 
+   util_sparse_array_finish(&ro->bo_map);
+
    FREE(ro);
 }
 
-struct pipe_screen *kmsro_drm_screen_create(int fd,
+struct pipe_screen *kmsro_drm_screen_create(int kms_fd,
                                             const struct pipe_screen_config *config)
 {
    struct pipe_screen *screen = NULL;
    struct renderonly *ro = CALLOC_STRUCT(renderonly);
+   char *render_dev_name = NULL;
 
    if (!ro)
       return NULL;
 
-   ro->kms_fd = fd;
-   ro->gpu_fd = -1;
+   ro->kms_fd = kms_fd;
+   ro->gpu_fd = pipe_loader_get_compatible_render_capable_device_fd(kms_fd);
+   if (ro->gpu_fd < 0) {
+      FREE(ro);
+      return NULL;
+   }
+
+   render_dev_name = loader_get_kernel_driver_name(ro->gpu_fd);
+   if (!render_dev_name) {
+      close(ro->gpu_fd);
+      FREE(ro);
+      return NULL;
+   }
+
    ro->destroy = kmsro_ro_destroy;
+   util_sparse_array_init(&ro->bo_map, sizeof(struct renderonly_scanout), 64);
+   simple_mtx_init(&ro->bo_map_lock, mtx_plain);
 
-#if defined(GALLIUM_VC4)
-   ro->gpu_fd = drmOpenWithType("vc4", NULL, DRM_NODE_RENDER);
-   if (ro->gpu_fd >= 0) {
-      /* Passes the vc4-allocated BO through to the KMS-only DRM device using
-       * PRIME buffer sharing.  The VC4 BO must be linear, which the SCANOUT
-       * flag on allocation will have ensured.
-       */
+   if (strcmp(render_dev_name, "asahi") == 0) {
+#if defined(GALLIUM_ASAHI)
       ro->create_for_resource = renderonly_create_gpu_import_for_resource;
-      screen = vc4_drm_screen_create_renderonly(ro, config);
-      if (!screen)
-         goto out_free;
-
-      return screen;
-   }
+      screen = asahi_drm_screen_create_renderonly(ro->gpu_fd, ro, config);
 #endif
-
+   }
+   else if (strcmp(render_dev_name, "etnaviv") == 0) {
 #if defined(GALLIUM_ETNAVIV)
-   ro->gpu_fd = drmOpenWithType("etnaviv", NULL, DRM_NODE_RENDER);
-   if (ro->gpu_fd >= 0) {
       ro->create_for_resource = renderonly_create_kms_dumb_buffer_for_resource;
-      screen = etna_drm_screen_create_renderonly(ro);
-      if (!screen)
-         goto out_free;
-
-      return screen;
-   }
+      screen = etna_drm_screen_create_renderonly(ro->gpu_fd, ro, config);
 #endif
-
+   } else if (strcmp(render_dev_name, "msm") == 0) {
 #if defined(GALLIUM_FREEDRENO)
-   ro->gpu_fd = drmOpenWithType("msm", NULL, DRM_NODE_RENDER);
-   if (ro->gpu_fd >= 0) {
-      ro->create_for_resource = renderonly_create_kms_dumb_buffer_for_resource;
-      screen = fd_drm_screen_create(ro->gpu_fd, ro, config);
-      if (!screen)
-         goto out_free;
-
-      return screen;
-   }
-#endif
-
-#if defined(GALLIUM_PANFROST)
-   ro->gpu_fd = drmOpenWithType("panfrost", NULL, DRM_NODE_RENDER);
-
-   if (ro->gpu_fd >= 0) {
       ro->create_for_resource = renderonly_create_kms_dumb_buffer_for_resource;
-      screen = panfrost_drm_screen_create_renderonly(ro);
-      if (!screen)
-         goto out_free;
-
-      return screen;
-   }
+      screen = fd_drm_screen_create_renderonly(ro->gpu_fd, ro, config);
 #endif
-
+   } else if (strcmp(render_dev_name, "lima") == 0) {
 #if defined(GALLIUM_LIMA)
-   ro->gpu_fd = drmOpenWithType("lima", NULL, DRM_NODE_RENDER);
-   if (ro->gpu_fd >= 0) {
       ro->create_for_resource = renderonly_create_kms_dumb_buffer_for_resource;
-      screen = lima_drm_screen_create_renderonly(ro);
-      if (!screen)
-         goto out_free;
-
-      return screen;
-   }
+      screen = lima_drm_screen_create_renderonly(ro->gpu_fd, ro, config);
 #endif
-
+   } else if (strcmp(render_dev_name, "panfrost") == 0) {
+#if defined(GALLIUM_PANFROST)
+      ro->create_for_resource = panfrost_create_kms_dumb_buffer_for_resource;
+      screen = panfrost_drm_screen_create_renderonly(ro->gpu_fd, ro, config);
+#endif
+   } else if (strcmp(render_dev_name, "v3d") == 0) {
 #if defined(GALLIUM_V3D)
-   ro->gpu_fd = drmOpenWithType("v3d", NULL, DRM_NODE_RENDER);
-   if (ro->gpu_fd >= 0) {
       ro->create_for_resource = renderonly_create_kms_dumb_buffer_for_resource;
-      screen = v3d_drm_screen_create_renderonly(ro, config);
-      if (!screen)
-         goto out_free;
-
-      return screen;
-   }
+      screen = v3d_drm_screen_create_renderonly(ro->gpu_fd, ro, config);
 #endif
-
-#if defined(GALLIUM_ASAHI)
-   ro->gpu_fd = drmOpenWithType("asahi", NULL, DRM_NODE_RENDER);
-
-   if (ro->gpu_fd >= 0) {
-      ro->create_for_resource = renderonly_create_kms_dumb_buffer_for_resource;
-      screen = asahi_drm_screen_create_renderonly(ro);
-      if (!screen)
-         goto out_free;
-
-      return screen;
-   }
+   } else if (strcmp(render_dev_name, "vc4") == 0) {
+#if defined(GALLIUM_VC4)
+      /* Passes the vc4-allocated BO through to the KMS-only DRM device using
+       * PRIME buffer sharing.  The VC4 BO must be linear, which the SCANOUT
+       * flag on allocation will have ensured.
+       */
+      ro->create_for_resource = renderonly_create_gpu_import_for_resource;
+      screen = vc4_drm_screen_create_renderonly(ro->gpu_fd, ro, config);
 #endif
+   }
 
-   return screen;
+   free(render_dev_name);
 
-out_free:
-   if (ro->gpu_fd >= 0)
-      close(ro->gpu_fd);
-   FREE(ro);
-
-   return NULL;
+   return screen;
 }
