diff a/src/gallium/drivers/panfrost/pan_disk_cache.c b/src/gallium/drivers/panfrost/pan_disk_cache.c	(rejected hunks)
@@ -109,41 +111,44 @@ panfrost_disk_cache_retrieve(struct disk_cache *cache,
                              struct panfrost_shader_binary *binary)
 {
 #ifdef ENABLE_SHADER_CACHE
-        if (!cache)
-                return false;
+   if (!cache)
+      return false;
+
+   cache_key cache_key;
+   panfrost_disk_cache_compute_key(cache, uncompiled, key, cache_key);
 
-        cache_key cache_key;
-        panfrost_disk_cache_compute_key(cache, uncompiled, key, cache_key);
+   if (debug) {
+      char sha1[41];
+      _mesa_sha1_format(sha1, cache_key);
+      fprintf(stderr, "[mesa disk cache] retrieving %s: ", sha1);
+   }
 
-        if (debug) {
-                char sha1[41];
-                _mesa_sha1_format(sha1, cache_key);
-                fprintf(stderr, "[mesa disk cache] retrieving %s: ", sha1);
-        }
+   size_t size;
+   void *buffer = disk_cache_get(cache, cache_key, &size);
 
-        size_t size;
-        void *buffer = disk_cache_get(cache, cache_key, &size);
+   if (debug)
+      fprintf(stderr, "%s\n", buffer ? "found" : "missing");
 
-        if (debug)
-                fprintf(stderr, "%s\n", buffer ? "found" : "missing");
+   if (!buffer)
+      return false;
 
-        if (!buffer)
-                return false;
+   struct blob_reader blob;
+   blob_reader_init(&blob, buffer, size);
 
-        struct blob_reader blob;
-        blob_reader_init(&blob, buffer, size);
+   util_dynarray_init(&binary->binary, NULL);
 
-        util_dynarray_init(&binary->binary, NULL);
+   uint32_t binary_size = blob_read_uint32(&blob);
+   void *ptr = util_dynarray_resize_bytes(&binary->binary, binary_size, 1);
 
-        uint32_t binary_size = blob_read_uint32(&blob);
-        void *ptr = util_dynarray_resize_bytes(&binary->binary, binary_size, 1);
+   blob_copy_bytes(&blob, ptr, binary_size);
+   blob_copy_bytes(&blob, &binary->info, sizeof(binary->info));
+   blob_copy_bytes(&blob, &binary->sysvals, sizeof(binary->sysvals));
 
-        blob_copy_bytes(&blob, ptr, binary_size);
-        blob_copy_bytes(&blob, &binary->info, sizeof(binary->info));
+   free(buffer);
 
-        return true;
+   return true;
 #else
-        return false;
+   return false;
 #endif
 }
 
@@ -154,22 +159,22 @@ void
 panfrost_disk_cache_init(struct panfrost_screen *screen)
 {
 #ifdef ENABLE_SHADER_CACHE
-        const char *renderer = screen->base.get_name(&screen->base);
+   const char *renderer = screen->base.get_name(&screen->base);
 
-        const struct build_id_note *note =
-                build_id_find_nhdr_for_addr(panfrost_disk_cache_init);
-        assert(note && build_id_length(note) == 20); /* sha1 */
+   const struct build_id_note *note =
+      build_id_find_nhdr_for_addr(panfrost_disk_cache_init);
+   assert(note && build_id_length(note) == 20); /* sha1 */
 
-        const uint8_t *id_sha1 = build_id_data(note);
-        assert(id_sha1);
+   const uint8_t *id_sha1 = build_id_data(note);
+   assert(id_sha1);
 
-        char timestamp[41];
-        _mesa_sha1_format(timestamp, id_sha1);
+   char timestamp[41];
+   _mesa_sha1_format(timestamp, id_sha1);
 
-        /* Consider any flags affecting the compile when caching */
-        uint64_t driver_flags = screen->dev.debug;
-        driver_flags |= ((uint64_t) (midgard_debug | bifrost_debug) << 32);
+   /* Consider any flags affecting the compile when caching */
+   uint64_t driver_flags = screen->dev.debug;
+   driver_flags |= ((uint64_t)(midgard_debug | bifrost_debug) << 32);
 
-        screen->disk_cache = disk_cache_create(renderer, timestamp, driver_flags);
+   screen->disk_cache = disk_cache_create(renderer, timestamp, driver_flags);
 #endif
 }
