diff a/src/gallium/drivers/panfrost/pan_screen.h b/src/gallium/drivers/panfrost/pan_screen.h	(rejected hunks)
@@ -58,80 +59,75 @@ struct pan_blend_state;
 /* Virtual table of per-generation (GenXML) functions */
 
 struct panfrost_vtable {
-        /* Prepares the renderer state descriptor or shader program descriptor
-         * for a given compiled shader, and if desired uploads it as well */
-        void (*prepare_shader)(struct panfrost_compiled_shader *,
-                            struct panfrost_pool *, bool);
-
-        /* Emits a thread local storage descriptor */
-        void (*emit_tls)(struct panfrost_batch *);
-
-        /* Emits a framebuffer descriptor */
-        void (*emit_fbd)(struct panfrost_batch *, const struct pan_fb_info *);
-
-        /* Emits a fragment job */
-        mali_ptr (*emit_fragment_job)(struct panfrost_batch *, const struct pan_fb_info *);
-
-        /* General destructor */
-        void (*screen_destroy)(struct pipe_screen *);
-
-        /* Preload framebuffer */
-        void (*preload)(struct panfrost_batch *, struct pan_fb_info *);
-
-        /* Initialize a Gallium context */
-        void (*context_init)(struct pipe_context *pipe);
-
-        /* Device-dependent initialization of a panfrost_batch */
-        void (*init_batch)(struct panfrost_batch *batch);
-
-        /* Get blend shader */
-        struct pan_blend_shader_variant *
-        (*get_blend_shader)(const struct panfrost_device *,
-                            const struct pan_blend_state *,
-                            nir_alu_type, nir_alu_type,
-                            unsigned rt);
-
-        /* Initialize the polygon list */
-        void (*init_polygon_list)(struct panfrost_batch *);
-
-        /* Shader compilation methods */
-        const nir_shader_compiler_options *(*get_compiler_options)(void);
-        void (*compile_shader)(nir_shader *s,
-                               struct panfrost_compile_inputs *inputs,
-                               struct util_dynarray *binary,
-                               struct pan_shader_info *info);
+   /* Prepares the renderer state descriptor or shader program descriptor
+    * for a given compiled shader, and if desired uploads it as well */
+   void (*prepare_shader)(struct panfrost_compiled_shader *,
+                          struct panfrost_pool *, bool);
+
+   /* General destructor */
+   void (*screen_destroy)(struct pipe_screen *);
+
+   /* Populate context vtable */
+   void (*context_populate_vtbl)(struct pipe_context *pipe);
+
+   /* Device-dependent initialization of a panfrost_batch */
+   void (*init_batch)(struct panfrost_batch *batch);
+
+   /* Device-dependent submission of a panfrost_batch */
+   int (*submit_batch)(struct panfrost_batch *batch, struct pan_fb_info *fb);
+
+   /* Get blend shader */
+   struct pan_blend_shader_variant *(*get_blend_shader)(
+      const struct panfrost_device *, const struct pan_blend_state *,
+      nir_alu_type, nir_alu_type, unsigned rt);
+
+   /* Shader compilation methods */
+   const nir_shader_compiler_options *(*get_compiler_options)(void);
+   void (*compile_shader)(nir_shader *s, struct panfrost_compile_inputs *inputs,
+                          struct util_dynarray *binary,
+                          struct pan_shader_info *info);
+
+   /* Run a compute shader to get the compressed size of each superblock */
+   void (*afbc_size)(struct panfrost_batch *batch,
+                     struct panfrost_resource *src,
+                     struct panfrost_bo *metadata, unsigned offset,
+                     unsigned level);
+
+   /* Run a compute shader to compact a sparse layout afbc resource */
+   void (*afbc_pack)(struct panfrost_batch *batch,
+                     struct panfrost_resource *src, struct panfrost_bo *dst,
+                     struct pan_image_slice_layout *slice,
+                     struct panfrost_bo *metadata, unsigned metadata_offset,
+                     unsigned level);
 };
 
 struct panfrost_screen {
-        struct pipe_screen base;
-        struct panfrost_device dev;
-        struct {
-                struct panfrost_pool bin_pool;
-                struct panfrost_pool desc_pool;
-        } blitter;
-        struct {
-                struct panfrost_pool bin_pool;
-        } indirect_draw;
-
-        struct panfrost_vtable vtbl;
-        struct disk_cache *disk_cache;
+   struct pipe_screen base;
+   struct panfrost_device dev;
+   struct {
+      struct panfrost_pool bin_pool;
+      struct panfrost_pool desc_pool;
+   } blitter;
+
+   struct panfrost_vtable vtbl;
+   struct disk_cache *disk_cache;
+   unsigned max_afbc_packing_ratio;
 };
 
 static inline struct panfrost_screen *
 pan_screen(struct pipe_screen *p)
 {
-        return (struct panfrost_screen *)p;
+   return (struct panfrost_screen *)p;
 }
 
 static inline struct panfrost_device *
 pan_device(struct pipe_screen *p)
 {
-        return &(pan_screen(p)->dev);
+   return &(pan_screen(p)->dev);
 }
 
-int
-panfrost_get_driver_query_info(struct pipe_screen *pscreen, unsigned index,
-                               struct pipe_driver_query_info *info);
+int panfrost_get_driver_query_info(struct pipe_screen *pscreen, unsigned index,
+                                   struct pipe_driver_query_info *info);
 
 void panfrost_cmdstream_screen_init_v4(struct panfrost_screen *screen);
 void panfrost_cmdstream_screen_init_v5(struct panfrost_screen *screen);
@@ -139,13 +135,13 @@ void panfrost_cmdstream_screen_init_v6(struct panfrost_screen *screen);
 void panfrost_cmdstream_screen_init_v7(struct panfrost_screen *screen);
 void panfrost_cmdstream_screen_init_v9(struct panfrost_screen *screen);
 
-#define perf_debug(dev, ...) \
-        do { \
-                if (unlikely((dev)->debug & PAN_DBG_PERF)) \
-                        mesa_logw(__VA_ARGS__); \
-        } while(0)
+#define perf_debug(dev, ...)                                                   \
+   do {                                                                        \
+      if (unlikely((dev)->debug & PAN_DBG_PERF))                               \
+         mesa_logw(__VA_ARGS__);                                               \
+   } while (0)
 
-#define perf_debug_ctx(ctx, ...) \
-        perf_debug(pan_device((ctx)->base.screen), __VA_ARGS__);
+#define perf_debug_ctx(ctx, ...)                                               \
+   perf_debug(pan_device((ctx)->base.screen), __VA_ARGS__);
 
 #endif /* PAN_SCREEN_H */
