diff a/src/compiler/glsl/glsl_to_nir.cpp b/src/compiler/glsl/glsl_to_nir.cpp	(rejected hunks)
@@ -81,26 +82,23 @@ public:
 
    void create_function(ir_function_signature *ir);
 
-   /* True if we have any output rvalues */
-   bool has_output_rvalue;
-
 private:
    void add_instr(nir_instr *instr, unsigned num_components, unsigned bit_size);
-   nir_ssa_def *evaluate_rvalue(ir_rvalue *ir);
+   nir_def *evaluate_rvalue(ir_rvalue *ir);
 
-   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_ssa_def **srcs);
-   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_ssa_def *src1);
-   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_ssa_def *src1,
-                       nir_ssa_def *src2);
-   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_ssa_def *src1,
-                       nir_ssa_def *src2, nir_ssa_def *src3);
+   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_def **srcs);
+   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_def *src1);
+   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_def *src1,
+                       nir_def *src2);
+   nir_alu_instr *emit(nir_op op, unsigned dest_size, nir_def *src1,
+                       nir_def *src2, nir_def *src3);
 
    bool supports_std430;
 
    nir_shader *shader;
    nir_function_impl *impl;
    nir_builder b;
-   nir_ssa_def *result; /* result of the expression tree last visited */
+   nir_def *result; /* result of the expression tree last visited */
 
    nir_deref_instr *evaluate_deref(ir_instruction *ir);
 
@@ -262,21 +203,6 @@ glsl_to_nir(const struct gl_constants *consts,
       shader->info.fs.pixel_center_integer = sh->Program->info.fs.pixel_center_integer;
       shader->info.fs.origin_upper_left = sh->Program->info.fs.origin_upper_left;
       shader->info.fs.advanced_blend_modes = sh->Program->info.fs.advanced_blend_modes;
-
-      nir_foreach_variable_with_modes(var, shader,
-                                      nir_var_shader_in |
-                                      nir_var_system_value) {
-         if (var->data.mode == nir_var_system_value &&
-             (var->data.location == SYSTEM_VALUE_SAMPLE_ID ||
-              var->data.location == SYSTEM_VALUE_SAMPLE_POS))
-            shader->info.fs.uses_sample_shading = true;
-
-         if (var->data.mode == nir_var_shader_in && var->data.sample)
-            shader->info.fs.uses_sample_shading = true;
-      }
-
-      if (v1.has_output_rvalue)
-         shader->info.fs.uses_sample_shading = true;
    }
 
    return shader;
@@ -284,10 +210,10 @@ glsl_to_nir(const struct gl_constants *consts,
 
 nir_visitor::nir_visitor(const struct gl_constants *consts, nir_shader *shader)
 {
+   this->consts = consts;
    this->supports_std430 = consts->UseSTD430AsDefaultPacking;
    this->shader = shader;
    this->is_global = true;
-   this->has_output_rvalue = false;
    this->var_table = _mesa_pointer_hash_table_create(NULL);
    this->overload_table = _mesa_pointer_hash_table_create(NULL);
    this->sparse_variable_set = _mesa_pointer_set_create(NULL);
@@ -1826,9 +1702,6 @@ nir_visitor::evaluate_rvalue(ir_rvalue* ir)
 
       enum gl_access_qualifier access = deref_get_qualifier(this->deref);
       this->result = nir_load_deref_with_access(&b, this->deref, access);
-
-      if (nir_deref_mode_is(this->deref, nir_var_shader_out))
-         this->has_output_rvalue = true;
    }
 
    return this->result;
